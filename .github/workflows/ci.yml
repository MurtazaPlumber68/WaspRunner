
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        targets: wasm32-wasi
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Run tests
      run: cargo test --verbose --all-features
      
    - name: Run doc tests
      run: cargo test --doc

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-wasi
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Build CLI
      run: cargo build --release --bin wasmrunner
      
    - name: Build examples
      run: |
        cd examples/hello-world
        cargo build --target wasm32-wasi --release
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wasmrunner-binaries
        path: |
          target/release/wasmrunner
          examples/*/target/wasm32-wasi/release/*.wasm

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: wasmrunner-binaries
        
    - name: Make binary executable
      run: chmod +x wasmrunner
      
    - name: Run integration tests
      run: |
        ./wasmrunner --version
        # Add more integration tests here

  fuzz:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      
    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz
      
    - name: Run fuzz tests
      run: |
        cargo fuzz build
        timeout 300 cargo fuzz run wasm_parser || true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, integration]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Build release
      run: cargo build --release
      
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          target/release/wasmrunner
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
